#version 430 core

#define GROUP_UNITS     16              // Number of units per work group in one dimension 
#define BODY_ELEMENTS   4               // Length of Body struct vec4 array
#define BODY_TYPES      20              // Limit number of Body Types
#define BODY_MAX        (1 << 10)       // Amount of Bodies array contains
#define LIST_ENTRIES    (1 << 6)        // Number of Lists
#define LIST_MAX        (1 << 10)       // Amount of Nodes List contains
#define STACK_MAX       (1 << 6)        // Amount of Items in Stack
#define LIGHTS_MAX      (1 << 4)        // Max number of lights

layout (local_size_x = GROUP_UNITS, local_size_y = GROUP_UNITS) in;
layout (rgba32f, binding = 0) restrict writeonly uniform image2D image;

struct Light {
    vec3 position;
    vec3 color;
};

// SDF return value
struct Value {
    float SD;
    vec3 color;
};

// Raymarch return value
struct Surface {
    vec3 position;
    vec3 color;
};

/// Scene Bodies ///
struct Sphere {
    vec3 position;
    float radius;
    vec3 color;
};

struct Box {
    vec3 position;
    vec3 size;
    vec3 color;
};

struct Cross {
    vec3 position;
    vec3 size;
    vec3 color;
};

uniform uint width;
uniform uint height;
uniform int iterations;
uniform float saturation;
uniform float surfacePrecision;
uniform float offsetPrecision;

uniform int kernelSize;
uniform uint totalLights;

uniform mat4x4 transform;
uniform float focal;

/// SSBO elements ///
struct Body {
    vec4 data[BODY_ELEMENTS];
};

// List Node
struct Node {
    uvec4 type; // Mode OR Type
    uvec4 ID;   // Total OR ID
};

/// SSBOs ///
layout (std430, binding = 0) readonly buffer Bodies {
    Body bodies[BODY_TYPES * BODY_MAX];
};

layout (std430, binding = 1) readonly buffer Tree {
    Node tree[LIST_ENTRIES * LIST_MAX];
};

layout (std430, binding = 2) readonly buffer Lights {
    Body lights[LIGHTS_MAX];
};


/// Stack ///
struct Item {
    uint ID;
    uint offset;
    Value surface;
};

Item stack[STACK_MAX];
uint size = 0;

void stackClear() {
    size = 0;
}

bool stackEmpty() {
    return size == 0;
}

void stackPush(Item item) {
    stack[size++] = item;    
}

Item stackPop() {
    return stack[--size];
}

/// List & Body operations ///
Node listPull(uint ID, uint offset) {
    return tree[ID * LIST_MAX + offset];
}

Node listMeta(uint ID) {
    return tree[ID * LIST_MAX];
}

bool listIsBase(uint offset) {
    return offset == 1;
}

Body bodyPull(uint type, uint ID) {
    return bodies[type * BODY_MAX + ID];
}

// Light operations
Light lightPull(uint ID) {
    Body body = lights[ID];
    return Light(body.data[0].xyz, body.data[1].xyz);
}

/// SDF operations ///
Value opUnion(Value s1, Value s2) {
    if (s1.SD < s2.SD) {
        return s1;
    }
    return s2;
}

Value opComplement(Value s) {
    return Value(-s.SD, s.color);
}

Value opUComplement(Value s1, Value s2) {
    return opUnion(s1, opComplement(s2));
}

Value opIntersection(Value s1, Value s2) {
    if (s1.SD > s2.SD) {
        return s1;
    }
    return s2;
}

Value opDifference(Value s1, Value s2) {
    return opIntersection(s1, opComplement(s2));
}

/// Body SDFs ///
Value sphereSDF(Sphere obj, vec3 position) {
    float sd = length(obj.position - position) - obj.radius;
    return Value(sd, obj.color);
}

Value boxSDF(Box obj, vec3 position) {
    vec3 distances = abs(position - obj.position) - obj.size / 2;
    float sd = max(max(distances.x, distances.y), distances.z);
    return Value(sd, obj.color);
}

Value crossSDF(Cross obj, vec3 position) {
    vec3 distances = abs(position - obj.position) - obj.size / 2;
    float dmin = min(min(distances.x, distances.y), distances.z);
    float dmax = max(max(distances.x, distances.y), distances.z);
    float sd = distances.x + distances.y + distances.z - dmin - dmax;
    return Value(sd, obj.color);
}

Value emptySDF() {
    return Value( 1.0f / 0.0f, vec3(1.0f) );
}

Value bodySDF(uint type, Body body, vec3 position) {
    if (type == 1) {
        Sphere obj = Sphere(body.data[0].xyz, body.data[1].x, body.data[2].xyz);
        return sphereSDF(obj, position);
    } else if (type == 2) {
        Box obj = Box(body.data[0].xyz, body.data[1].xyz, body.data[2].xyz);
        return boxSDF(obj, position);
    } else if (type == 3) {
        Cross obj = Cross(body.data[0].xyz, body.data[1].xyz, body.data[2].xyz);
        return crossSDF(obj, position);
    }
    return emptySDF();
}

Value listApply(uint mode, Value left, Value right, bool base) {
    if (base) {
        if (mode == 1)
            right = opComplement(right);
        return right;
    }

    if (mode == 0) return opUnion(left, right);
    else if (mode == 1) return opUComplement(left, right);
    else if (mode == 2) return opIntersection(left, right);
    else if (mode == 3) return opDifference(left, right);
    return left;
}

/// Camera ///
vec3 view(vec3 vector, bool offset) {
    vec4 extended = vec4(vector, 0.0f);
    if (offset) extended.w = 1.0f;
    vec4 transformed = transform * extended;
    return transformed.xyz;
}

/// Scene ///
Value SDF(vec3 position) {
    stackClear();
    Item top = Item(0, 0, emptySDF());
    stackPush(top);

    uint total = 0;

    while (!stackEmpty()) {
        Node meta = listMeta(top.ID);
        bool base = listIsBase(++top.offset);
        if (top.offset > meta.ID.x) {
            // List end
            Item pop = stackPop();
            meta = listMeta(pop.ID);
            base = listIsBase(pop.offset);

            top.ID = pop.ID;
            top.offset = pop.offset;
            top.surface = listApply(meta.type.x, pop.surface, top.surface, base);
            continue;
        }

        Node node = listPull(top.ID, top.offset);
        if (node.type.x == 0) {
            // List node
            stackPush(top);
            top.ID = node.ID.x;
            top.offset = 0;
            top.surface = emptySDF();

        } else {
            // Body node
            Body body = bodyPull(node.type.x, node.ID.x);
            Value surface = bodySDF(node.type.x, body, position);
            top.surface = listApply(meta.type.x, top.surface, surface, base);
        }
    }

    return top.surface;
}

vec3 grad(vec3 position) {
    float h = 1e-3f;
    vec3 dx = vec3(h, 0.0f, 0.0f);
    vec3 dy = vec3(0.0f, h, 0.0f);
    vec3 dz = vec3(0.0f, 0.0f, h);

    Value dxl = SDF(position + dx);
    Value dxr = SDF(position - dx);
    float dfdx = dxl.SD - dxr.SD;

    Value dyl = SDF(position + dy);
    Value dyr = SDF(position - dy);
    float dfdy = dyl.SD - dyr.SD;

    Value dzl = SDF(position + dz);
    Value dzr = SDF(position - dz);
    float dfdz = dzl.SD - dzr.SD;

    return vec3(dfdx, dfdy, dfdz) / (2 * h);
}

Surface raySurface(vec3 position, vec3 ray) {
    Surface surface = Surface( position, vec3(0.0f) );
    for (int _ = 0; _ < iterations; _++) {
        Value value = SDF(surface.position);
        surface.position += value.SD * ray;
        surface.color = value.color;
        if (value.SD < surfacePrecision) break;
    }
    return surface;
}

// Calculate shadow ray
bool shadow(Light light, vec3 position, vec3 normal) {
    vec3 ray = normalize(light.position - position);
    position += normal * (surfacePrecision + offsetPrecision);
    Surface surface = raySurface(position, ray);
    return dot(light.position - surface.position, ray) > 0;
}

// Calculate the lighting at the surface
float lighting(vec3 position, vec3 normal) {
    float lighting = 0.0f;
    for (uint ID = 0; ID < totalLights; ID++) {
        Light light = lightPull(ID);
        if (!shadow(light, position, normal))
            lighting += dot(normal, normalize(light.position - position));
    }
    lighting = clamp(lighting, saturation, 1.0f);
    return lighting;
}

// Calculate the color produced by ray
vec3 raymarch(vec3 position, vec3 ray) {
    Surface surface = raySurface(position, ray);
    vec3 normal = normalize(grad(surface.position));
    float light = lighting(surface.position, normal);
    vec3 color = light * surface.color;
    return color;
}

void main() {
    /////////////////////////////////////////////
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    float AR = float(width) / height;

    float w = focal;
    float h = w / AR;
    vec2 s1 = vec2( -w/2,  h/2 ); // screen top left corner
    vec2 s2 = vec2(  w/2, -h/2 ); // screen bottom right corner

    vec2 psize = vec2( 1.0f / width, 1.0f / height ); // pixel size

    // screen space UV
    vec2 uv1      = vec2(coord) * psize;
    ivec2 offset  = ivec2(1, 1);
    vec2 uv2      = vec2(coord + offset) * psize;

    vec2 p1       = vec2( mix( s1.x, s2.x, uv1.x), mix( s1.y, s2.y, uv1.y) ); // pixel top left corner
    vec2 p2       = vec2( mix( s1.x, s2.x, uv2.x), mix( s1.y, s2.y, uv2.y) ); // pixel bottom right corner

    vec3 total = vec3(0.0f);

    vec3 position = vec3(0.0f);
    position = view(position, true);

    for (int i = 0; i < kernelSize; i++) {
        for (int j = 0; j < kernelSize; j++) {
            vec2 uv = vec2( i + 1, j + 1 ) / kernelSize;
            float x = mix( p1.x, p2.x, uv.x);
            float y = mix( p1.y, p2.y, uv.y);
            float z = -1.0f;
            vec3 ray = normalize( vec3(x, y, z) );
            ray = view(ray, false);

            vec3 color = raymarch(position, ray);
            total += color;
        }
    }

    vec3 color = total / (kernelSize * kernelSize);
    vec4 outColor = vec4(color, 1.0f);
    imageStore(image, coord, outColor);
}
